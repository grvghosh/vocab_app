{"ast":null,"code":"import { ApolloClient, InMemoryCache, gql } from '@apollo/client';\nconst serverUrl = 'http://localhost:5000/graphql';\nconst client = new ApolloClient({\n  uri: serverUrl,\n  cache: new InMemoryCache()\n});\nexport const getAllWords = async () => {\n  const result = await client.query({\n    query: gql`\n      {\n        words {\n          word\n          entries {\n            partOfSpeech\n            origin\n            definitions\n            examples\n          }\n        }\n      }\n    `\n  });\n  return result.data.words;\n};\nexport const addNewWord = async word => {\n  console.log(\"word => \", word);\n  try {\n    const result = await client.mutate({\n      mutation: gql`\n        mutation AddWord($word: String!) {\n          addWord(word: $word) {\n            word\n            entries {\n              partOfSpeech\n              origin\n              definitions\n              examples\n            }\n          }\n        }\n      `,\n      variables: {\n        word // Pass the word as a variable\n      }\n    });\n    console.log(\"result - \", result);\n    return result.data.addWord;\n  } catch (error) {\n    console.error(\"GraphQL mutation error:\", error);\n  }\n};","map":{"version":3,"names":["ApolloClient","InMemoryCache","gql","serverUrl","client","uri","cache","getAllWords","result","query","data","words","addNewWord","word","console","log","mutate","mutation","variables","addWord","error"],"sources":["C:/assignment_hiring/Roado-master/Roado-master/client/src/utils/helper.js"],"sourcesContent":["\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client'\n\nconst serverUrl = 'http://localhost:5000/graphql';\n\nconst client = new ApolloClient({\n  uri: serverUrl,\n  cache: new InMemoryCache(),\n});\n\nexport const getAllWords = async () => {\n  const result = await client.query({\n    query: gql`\n      {\n        words {\n          word\n          entries {\n            partOfSpeech\n            origin\n            definitions\n            examples\n          }\n        }\n      }\n    `,\n  });\n  return result.data.words;\n};\n\nexport const addNewWord = async (word) => {\n  console.log(\"word => \", word);\n  try {\n    const result = await client.mutate({\n      mutation: gql`\n        mutation AddWord($word: String!) {\n          addWord(word: $word) {\n            word\n            entries {\n              partOfSpeech\n              origin\n              definitions\n              examples\n            }\n          }\n        }\n      `,\n      variables: {\n        word, // Pass the word as a variable\n      },\n    });\n    console.log(\"result - \", result);\n    return result.data.addWord;\n  } catch (error) {\n    console.error(\"GraphQL mutation error:\", error);\n  }\n};\n"],"mappings":"AACA,SAASA,YAAY,EAAEC,aAAa,EAAEC,GAAG,QAAQ,gBAAgB;AAEjE,MAAMC,SAAS,GAAG,+BAA+B;AAEjD,MAAMC,MAAM,GAAG,IAAIJ,YAAY,CAAC;EAC9BK,GAAG,EAAEF,SAAS;EACdG,KAAK,EAAE,IAAIL,aAAa,CAAC;AAC3B,CAAC,CAAC;AAEF,OAAO,MAAMM,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,MAAMC,MAAM,GAAG,MAAMJ,MAAM,CAACK,KAAK,CAAC;IAChCA,KAAK,EAAEP,GAAG;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,CAAC;EACF,OAAOM,MAAM,CAACE,IAAI,CAACC,KAAK;AAC1B,CAAC;AAED,OAAO,MAAMC,UAAU,GAAG,MAAOC,IAAI,IAAK;EACxCC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEF,IAAI,CAAC;EAC7B,IAAI;IACF,MAAML,MAAM,GAAG,MAAMJ,MAAM,CAACY,MAAM,CAAC;MACjCC,QAAQ,EAAEf,GAAG;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;MACDgB,SAAS,EAAE;QACTL,IAAI,CAAE;MACR;IACF,CAAC,CAAC;IACFC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEP,MAAM,CAAC;IAChC,OAAOA,MAAM,CAACE,IAAI,CAACS,OAAO;EAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdN,OAAO,CAACM,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;EACjD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}