{"ast":null,"code":"import { ApolloClient, InMemoryCache, gql } from '@apollo/client';\nconst serverUrl = 'http://localhost:5000/graphql';\nconst client = new ApolloClient({\n  uri: serverUrl,\n  cache: new InMemoryCache()\n});\nexport const getAllWords = async () => {\n  console.log(\"is this running?\");\n  const result = await client.query({\n    query: gql`\n            {\n                words{\n                    word\n                    entries{\n                        partOfSpeech\n                        origin\n                        definitions\n                        examples\n                    }\n                }\n            }`\n  });\n  return result.data.words;\n};\n\n// export const addNewWord = async (word) => {\n//     console.log(\"word => \", word)\n//     const result = await client\n//         .mutate({\n//             mutation: gql`\n//             mutation {\n//                 addWord(word: \"${word}\"){\n//                     word\n//                     entries{\n//                         partOfSpeech\n//                         origin\n//                         definitions\n//                         examples\n//                     }\n//                 }\n//             }`\n//         })\n//         console.log(\"result - \", result)\n//     return result.data.addWord\n// }\n\nexport const addNewWord = async word => {\n  console.log(\"word => \", word);\n  try {\n    const result = await client.mutate({\n      mutation: gql`\n                mutation {\n                    addWord(word: \"${word}\"){\n                        word\n                        entries{\n                            partOfSpeech\n                            origin\n                            definitions\n                            examples\n                        }\n                    }\n                }`\n    });\n    console.log(\"result - \", result); // Check the result here\n    return result.data.addWord;\n  } catch (error) {\n    console.error(\"GraphQL mutation error:\", error);\n  }\n};","map":{"version":3,"names":["ApolloClient","InMemoryCache","gql","serverUrl","client","uri","cache","getAllWords","console","log","result","query","data","words","addNewWord","word","mutate","mutation","addWord","error"],"sources":["C:/assignment_hiring/Roado-master/Roado-master/client/src/utils/helper.js"],"sourcesContent":["import { ApolloClient, InMemoryCache, gql } from '@apollo/client'\n\nconst serverUrl = 'http://localhost:5000/graphql'\n\nconst client = new ApolloClient({\n    uri: serverUrl,\n    cache: new InMemoryCache()\n})\n\nexport const getAllWords = async () => {\n    console.log(\"is this running?\")\n    const result = await client\n        .query({\n            query: gql`\n            {\n                words{\n                    word\n                    entries{\n                        partOfSpeech\n                        origin\n                        definitions\n                        examples\n                    }\n                }\n            }`\n        })\n    return result.data.words\n}\n\n// export const addNewWord = async (word) => {\n//     console.log(\"word => \", word)\n//     const result = await client\n//         .mutate({\n//             mutation: gql`\n//             mutation {\n//                 addWord(word: \"${word}\"){\n//                     word\n//                     entries{\n//                         partOfSpeech\n//                         origin\n//                         definitions\n//                         examples\n//                     }\n//                 }\n//             }`\n//         })\n//         console.log(\"result - \", result)\n//     return result.data.addWord\n// }\n\n\nexport const addNewWord = async (word) => {\n    console.log(\"word => \", word)\n    try {\n        const result = await client\n            .mutate({\n                mutation: gql`\n                mutation {\n                    addWord(word: \"${word}\"){\n                        word\n                        entries{\n                            partOfSpeech\n                            origin\n                            definitions\n                            examples\n                        }\n                    }\n                }`\n            })\n        console.log(\"result - \", result) // Check the result here\n        return result.data.addWord\n    } catch (error) {\n        console.error(\"GraphQL mutation error:\", error)\n    }\n}\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,aAAa,EAAEC,GAAG,QAAQ,gBAAgB;AAEjE,MAAMC,SAAS,GAAG,+BAA+B;AAEjD,MAAMC,MAAM,GAAG,IAAIJ,YAAY,CAAC;EAC5BK,GAAG,EAAEF,SAAS;EACdG,KAAK,EAAE,IAAIL,aAAa,CAAC;AAC7B,CAAC,CAAC;AAEF,OAAO,MAAMM,WAAW,GAAG,MAAAA,CAAA,KAAY;EACnCC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;EAC/B,MAAMC,MAAM,GAAG,MAAMN,MAAM,CACtBO,KAAK,CAAC;IACHA,KAAK,EAAET,GAAG;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACQ,CAAC,CAAC;EACN,OAAOQ,MAAM,CAACE,IAAI,CAACC,KAAK;AAC5B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,MAAMC,UAAU,GAAG,MAAOC,IAAI,IAAK;EACtCP,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEM,IAAI,CAAC;EAC7B,IAAI;IACA,MAAML,MAAM,GAAG,MAAMN,MAAM,CACtBY,MAAM,CAAC;MACJC,QAAQ,EAAEf,GAAG;AAC7B;AACA,qCAAqCa,IAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,CAAC,CAAC;IACNP,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEC,MAAM,CAAC,EAAC;IACjC,OAAOA,MAAM,CAACE,IAAI,CAACM,OAAO;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZX,OAAO,CAACW,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;EACnD;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}